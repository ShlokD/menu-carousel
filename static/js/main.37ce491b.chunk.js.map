{"version":3,"sources":["images.js","App.js","serviceWorker.js","index.js"],"names":["name","src","Carousel","images","useState","selectedImage","setSelectedImage","class","className","map","image","index","key","alt","id","height","width","style","transform","transition","perspective","onMouseEnter","elemId","document","getElementById","scrollIntoView","behaviour","block","showElem","onChange","toggleElem","type","htmlFor","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8PAAe,G,MAAA,CACb,CACEA,KAAM,MACNC,IACE,0IAEJ,CACED,KAAM,UACNC,IACE,0IAEJ,CACED,KAAM,UACNC,IACE,0IAEJ,CACED,KAAM,QACNC,IACE,0IAEJ,CACED,KAAM,YACNC,IACE,0IAEJ,CACED,KAAM,QACNC,IACE,4ICzBAC,EAAW,SAAC,GAAgB,IAAdC,EAAa,EAAbA,OAAa,EACWC,mBAAS,IADpB,mBACxBC,EADwB,KACTC,EADS,KAa/B,OACE,yBAAKC,MAAM,QACT,yBAAKC,UAAU,sCACZL,EAAOM,KAAI,SAACC,EAAOC,GAClB,OACE,yBACEC,IAAG,wBAAmBD,GACtBE,IAAKH,EAAMV,KACXc,GAAE,wBAAmBJ,EAAMV,MAC3BQ,UAAU,6BACVP,IAAKS,EAAMT,IACXc,OAAO,MACPC,MAAM,MACNC,MAAO,CACLC,UAAU,WAAD,OACPb,IAAkBK,EAAMV,KAAO,OAAS,QADjC,KAGTmB,WAAY,6BACZC,YAAa,eAMvB,yBAAKZ,UAAU,wEACZL,EAAOM,KAAI,WAAWE,GAAW,IAAnBX,EAAkB,EAAlBA,KACb,OACE,yBACEY,IAAG,oBAAeD,GAClBU,aAAc,kBAnCT,SAACrB,GAChB,IAAMsB,EAAM,wBAAoBtB,GACnBuB,SAASC,eAAeF,GAChCG,eAAe,CAAEC,UAAW,SAAUC,MAAO,WAgCpBC,CAAS5B,IAC7B6B,SAAU,kBAxCH,SAAC7B,GAClBM,EAAiBN,GAuCS8B,CAAW9B,IAC3BQ,UAAU,0BAEV,2BACEA,UAAU,KACVuB,KAAK,QACLjB,GAAId,EACJA,KAAK,cAEP,2BAAOQ,UAAU,uBAAuBwB,QAAShC,GAC9CA,UAkBFiC,MARf,WACE,OACE,yBAAKzB,UAAU,OACb,kBAAC,EAAD,CAAUL,OAAQA,MC1DJ+B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFlB,SAASC,eAAe,SDyHpB,kBAAmBkB,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.37ce491b.chunk.js","sourcesContent":["export default [\r\n  {\r\n    name: \"Day\",\r\n    src:\r\n      \"https://images.unsplash.com/photo-1603472389867-97e05566ecc8?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1489&q=80\",\r\n  },\r\n  {\r\n    name: \"Inspire\",\r\n    src:\r\n      \"https://images.unsplash.com/photo-1603543394745-9d100843680b?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\",\r\n  },\r\n  {\r\n    name: \"Opinion\",\r\n    src:\r\n      \"https://images.unsplash.com/photo-1593642702821-c8da6771f0c6?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1489&q=80\",\r\n  },\r\n  {\r\n    name: \"Jewel\",\r\n    src:\r\n      \"https://images.unsplash.com/photo-1603473036383-df544a1dcada?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1328&q=80\",\r\n  },\r\n  {\r\n    name: \"Migration\",\r\n    src:\r\n      \"https://images.unsplash.com/photo-1603538794058-7471d7648902?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1350&q=80\",\r\n  },\r\n  {\r\n    name: \"Arrow\",\r\n    src:\r\n      \"https://images.unsplash.com/photo-1603536764976-e2d8a6d805fc?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=1367&q=80\",\r\n  },\r\n];\r\n","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport images from \"./images\";\n\nconst Carousel = ({ images }) => {\n  const [selectedImage, setSelectedImage] = useState(\"\");\n\n  const toggleElem = (name) => {\n    setSelectedImage(name);\n  };\n\n  const showElem = (name) => {\n    const elemId = `carousel-item-${name}`;\n    const elem = document.getElementById(elemId);\n    elem.scrollIntoView({ behaviour: \"smooth\", block: \"center\" });\n  };\n\n  return (\n    <div class=\"flex\">\n      <div className=\"w-75 flex flex-column items-center\">\n        {images.map((image, index) => {\n          return (\n            <img\n              key={`carousel-item-${index}`}\n              alt={image.name}\n              id={`carousel-item-${image.name}`}\n              className=\"ma4 pa4 h-75 w-80 shadow-2\"\n              src={image.src}\n              height=\"75%\"\n              width=\"80%\"\n              style={{\n                transform: `rotateX(${\n                  selectedImage === image.name ? \"0deg\" : \"45deg\"\n                })`,\n                transition: \"transform 0.5s ease-in-out\",\n                perspective: \"800px\",\n              }}\n            ></img>\n          );\n        })}\n      </div>\n      <div className=\"w-25 h-100 fixed right-0 flex flex-column items-start justify-center\">\n        {images.map(({ name }, index) => {\n          return (\n            <div\n              key={`list-item-${index}`}\n              onMouseEnter={() => showElem(name)}\n              onChange={() => toggleElem(name)}\n              className=\"dib ma2 pa4 pointer tc\"\n            >\n              <input\n                className=\"dn\"\n                type=\"radio\"\n                id={name}\n                name=\"menu-item\"\n              ></input>\n              <label className=\"pointer underline f4\" htmlFor={name}>\n                {name}\n              </label>\n            </div>\n          );\n        })}\n      </div>\n    </div>\n  );\n};\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Carousel images={images} />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}